//this is a project for Interaction studio class.
In this project, I use MYO band to collect the data during the user doing hand therapy exercise.
In this design, the user needs to do 50 movements in 5 gestures to finish the exercise.
It will count the amount of each movement you make that achieves the strength level.
The strength level is also adjustable.
When you finished a group of exercise, a big "complete" text will be showing on the screen.//

import de.voidplus.myo.*;
import controlP5.*;
ControlP5 cp5;
Chart myChart;
Myo myo;
ArrayList<ArrayList<Integer>> sensors;
PImage[] img;
boolean[] active;
int myColorBackground = color(0, 0, 0);
int strength = 200;
int repeate=0;
int countNumber= 0;
int x=10;
int dim;
int Y_AXIS = 1;
int X_AXIS = 2;
color b1, b2, c1, c2;


//active = new boolean[5];
//resetImages();



void setup() {
  size(550, 900);

  //noFill();
  //strength
  myo = new Myo(this, true); // true, with EMG data
  sensors = new ArrayList<ArrayList<Integer>>();
  for (int i=0; i<8; i++) {
    sensors.add(new ArrayList<Integer>());
    myo.setFrequency(10);



    //define color
    b1 = color(255);
    b2 = color(0);
    c1 = color(86, 162, 252);
    c2 = color(217, 251, 172);

    //gesture images
    img = new PImage[5];
    img[0] = loadImage("data/make_a_fist.png");
    img[1] = loadImage("data/spread_fingers.png");
    img[2] = loadImage("data/wave_left.png");
    img[3] = loadImage("data/wave_right.png");
    img[4] = loadImage("data/double_tab.png");

    active = new boolean[5];
    resetImages();
  }

  // chart
  smooth();
  cp5 = new ControlP5(this);
  cp5.addSlider("strength")
    .setRange(100, 500)
    .setValue(280)
    .setPosition(470, 600)
    .setSize(5, 200);
}


void resetImages() {
  for (int i = 0; i<5; i++) {
    active[i] = false;
  }
}

void draw() {
  println(strength);
  //colorMode(HSB,360,255,100);
  setGradient(0, 0, 600, 900, c1, c2, Y_AXIS);

  //Strength level
  textAlign(CENTER, CENTER);
  textSize(30);
  fill(255);
  text("Strength level", 275, 530);



  //gesture images
  for (int i = 0; i<5; i++) {
    tint(255, (active[i]) ? 100 : 1);
    image(img[i], 25, 80, 500, 500);
  }

  // counting
  textSize(100);
  fill(255, 255, 255, 98);
  text(repeate+"", 0, 0, 575, 320);

  repeat();
  delay(10);
  task();



  synchronized (this) {
    for (int i=0; i<1; i++) {
      if (!sensors.get(i).isEmpty()) {
        beginShape();
        for (int j=0; j<sensors.get(i).size(); j++) {
          vertex(j+20, sensors.get(i).get(j)+(i*50));
          noStroke();
          fill(255, 255, 255, 30+i);
          rect(78, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
          rect(130, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
          rect(185, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
          rect(240, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
          rect(295, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
          rect(350, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
          rect(405, 800, 50, - sensors.get(i).get(j)+(i*50)+200, 2);
        }
        delay(50);
        endShape();
      }
    }
  }
  // Drawing:

  fill(0, 180, 177, 30);
  rect(75, 800, 400, -strength+200, 7);
}




void myoOnEmgData(Device myo, long timestamp, int[] data) {
  //println("Sketch: myoOnEmgData, device: " + myo.getId());
  //int[] data <- 8 values from -128 to 127;

  synchronized (this) {
    for (int i = 0; i<data.length; i++) {
      sensors.get(i).add((int) map(data[i], -128, 127, 0, 500)); // [-128 - 127]
    }  // Data:
    while (sensors.get(0).size() > height/7) {
      for (ArrayList<Integer> sensor : sensors) {
        sensor.remove(0);
      }
    }
  }
}


// genstruee images
void myoOnPose(Device myo, long timestamp, Pose pose) {

  if (!pose.getType().toString().equals("REST")) {
    resetImages();
  }

  switch (pose.getType()) {
  case REST:
    //resetImages();
    break;
  case FIST:
    active[0] = true;
    myo.vibrate();
    break;
  case FINGERS_SPREAD:
    active[1] = true;
    break;
  case DOUBLE_TAP:
    active[0] = true;
    break;
  case WAVE_IN:
    active[2] = true;
    break;
  case WAVE_OUT:
    active[3] = true;
    break;
  default:
    break;
  }
}

void myoOnLock(Device myo, long timestamp) {
  resetImages();
}

void myoOnUnLock(Device myo, long timestamp) {
  resetImages();
}

//countting
void repeat() {
  synchronized (this) {
    for (int i=0; i<1; i++) 
      for (int j=0; j<sensors.get(i).size(); j++) {
        vertex(j+20, sensors.get(i).get(j)+(i*20));

        if (sensors.get(i).get(j)-(i*20) > strength) 
        { 
          countNumber++;
          if (countNumber > 120) {
            repeate++;
            countNumber = 0;
            if (repeate > 50) {
              repeate = 1;
            }
          } else { 
            // repeate = 0;
          }  
          //delay(100);
        }
      }
  }
} 

//task
void task() {  
  for (int i = 0; i<5; i++) {
    if (repeate >= 0) {       
      tint(255, (active[0]) ? 100 : 60);
      image(img[0], 110, 430, 80, 80);
    } 
    if (repeate >= 10 ) {       
      tint(255, (active[1]) ? 100 : 60);
      image(img[1], 178, 430, 80, 80);
    } 
    if (repeate >= 20) {       
      tint(255, (active[2]) ? 100 : 60);
      image(img[2], 240, 430, 80, 80);
    } 
    if (repeate >= 30) {       
      tint(255, (active[3]) ? 100 : 60);
      image(img[3], 300, 430, 80, 80);
    } 
    if (repeate >= 40) {       
      tint(255, (active[4]) ? 100 : 60);
      image(img[4], 365, 430, 80, 80);
    }
  }


  if (repeate >= 50) {       
    textSize(100);
    fill(255, 255, 255, 98);
    text("Complete!", 275, 430);
  }
}

//color gradient

void setGradient(int x, int y, float w, float h, color c1, color c2, int axis ) {

  noFill();

  if (axis == Y_AXIS) {  // Top to bottom gradient
    for (int i = y; i <= y+h; i++) {
      float inter = map(i, y, y+h, 0, 1);
      color c = lerpColor(c1, c2, inter);
      stroke(c);
      line(x, i, x+w, i);
    }
  } else if (axis == X_AXIS) {  // Left to right gradient
    for (int i = x; i <= x+w; i++) {
      float inter = map(i, x, x+w, 0, 1);
      color c = lerpColor(c1, c2, inter);
      stroke(c);
      line(i, y, i, y+h);
    }
  }
}



//void drawGradient(float x, float y) {
//int radius = dim/2;
//float h = random(0, 360);
//for (int r = radius; r > 0; --r) {
//  fill(h, 90, 90);
//  ellipse(x, y, r, r);
//  h = (h + 1) % 360;
//}
//  
